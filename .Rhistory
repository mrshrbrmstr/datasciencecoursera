setwd(cur)                                  ## Restores working directory to original
return(round(Sum.pollutant/Count.pollutant, digits = 3))       ## Function returns a numeric value of length 1
}
test1 <- pollutantmean("specdata", "sulfate", 1:10)
?cor
?cor
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "pearson")
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
warnings()
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "pearson")
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "kendall")
}
}
return(round(corr.vector), digits = 5)
}
test <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "kendall"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "kendall"), digits = 5)
}
}
return(corr.vector)
}
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "spearman"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", method = "pearson"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "everything", method = "pearson"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "complete.obs", method = "pearson"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                           ## Store current working directory
size.corr <- 0
corr.vector <- 0
for (i in 1:332) {
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
nobs <- complete(directory, i)
if (nobs[1] > threshold) {
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "na.or.complete", method = "pearson"), digits = 5)
}
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
summary(test)
cases <- complete("specdata", 1:332)
cases
cases$nobs
cases$nobs > 10000
cases$nobs > 150
cases
cases[1,]
cases[1:10,]
cases[TRUE,]
cases[c(TRUE, FALSE),]
cases[FALSE,]
cases$nobs > 150
select <- cases$nobs > 150
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- 0
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs"), digits=5)
}
return(corr.vector)
}
test <- corr("specdata", 150)
head(test)
summary(test)
test <- corr("specdata", 400)
head(test)
summary(test)
test <- corr("specdata", 4000)
head(test)
summary(test)
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- numeric(0)
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs"), digits=5)
}
return(corr.vector)
}
?numeric
test <- corr("specdata", 4000)
test
summary(test)
length(test)
test <- corr("specdata")
summary(test)
head(test)
length(test)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- numeric(0)                           ## Creates an empty numeric vector of length 0
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs"), digits=4)
}
return(corr.vector)
}
submit()
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- numeric(0)                           ## Creates an empty numeric vector of length 0
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs")
}
return(corr.vector)
}
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- numeric(0)                           ## Creates an empty numeric vector of length 0
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs", digits = 4))
}
return(corr.vector)
}
submit()
corr <- function(directory, threshold = 0) {
cur <- getwd()                                      ## Store current working directory
size.corr <- 0
corr.vector <- numeric(0)                           ## Creates an empty numeric vector of length 0
cases <- complete(directory, 1:332)                 ## this gets all the complete cases
ids <- cases[cases$nobs > threshold,]$id            ## cases[cases$nobs > threshold] is a sub-table with only the rows
## that satisfy the logical statement "cases$nobs > threshold" $id selects the id column vector
for (i in ids) {                                    ## this iterates over that ids vector
setwd(directory)                                  ## Set wd to correct file location
Char.RecordNumber <- sprintf("%03d.csv", i)       ## Converts numeric id into a string of chr
tmp <- read.csv(Char.RecordNumber)                ## Reads the file and stores in tmp
setwd(cur)                                        ## Restores wd prior to other function
size.corr <- size.corr + 1
corr.vector[size.corr] <- round(cor(tmp$sulfate, tmp$nitrate, use = "pairwise.complete.obs"), digits = 4)
}
return(corr.vector)
}
submit()
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?list
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() { return(x) }
setmean <- function(mean) { m <<- mean }
getmean <- function() { return(m) }
return(list(set = set, get = get, setmean = setmean, getmean = getmean))
}
m
x
rm(x)
rm (z)
rm (test1)
rm(test2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() { return(x) }
setmean <- function(mean) { m <<- mean }
getmean <- function() { return(m) }
return(list(set = set, get = get, setmean = setmean, getmean = getmean))
}
m
x
q <- makeVector(LETTER)
q <- makeVector(LETTERS)
LETTERS
m
x
q$get()
x
`<<-`
q <- makeVector(LETTERS)
r <- makeVector(numbers)
t <- makeVector(weekdays)
rm(q)
rm(r)
rm(s)
rm(t)
sample(10000,replace=TRUE)
q <- makeVectore(sample(10000,replace=TRUE))
q <- makeVector(sample(10000,replace=TRUE))
q$get()
r <- makeVector(sample(10000,replace=TRUE))
r$get()[100]
q$get()[100]
q
makeVector
q
r
r$setmean()
r$setmean(mean(r$get()))
r$get()
r$getmean()
system.time(r$getmean())
system.time(mean(r$get()))
r$set(sample(100000000,replace=TRUE))
r$get()
system.time(mean(r$get()))
r$setmean(mean(r$get()))
system.time(r$getmean())
? solve()
? mean()
? <<-
<<-
? "<<-"
?matrix
as.matrix(warpbreaks)
mat2 <- matrix(1:9, 3, byrow = T)
mat2
solve(mat2)
?solve
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
solve(h8)
solve(mat2)
solve(h8)
## Memory set aside for storing the values of a matrix x and inverse of x (inv) will remain
## even after the function terminates.
## Function makeCacheMatrix takes a matrix (default is empty matrix)
## returns a list of 4 objects: set, get, setinverse, getinverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() { return(x) }
setinverse <- function(inverse) { inv <<- inverse }
getinverse <- function() { return(inv) }
return(list(set = set, get = get, setinverse = setinverse, getinverse = getinverse))
}
## The function cacheSolve will return the cached (stored) inverse of matrix x, if it exists
## If the inverse does not exist, this function will calculate the inverse and store the
## inverse for use in the parent, or global, environment
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## if the value of inv is not empty, its contents are retrieved
## this stops the inverse from being calculated again
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
return(inv)
}
q <- makeCacheMatrix(h8)
q$get()
q$setinverse(q$get())
q$getinverse()
score(h8)
solve(h8)
q <- makeCacheMatrix(h8)
cachSolve(q)
cacheSolve(q)
q$getinverse()
rm(q)
q <- makeCacheMatrix(h8)
cacheSolve(q)
q
q$getinverse()
rm(q)
q <- makeCacheMatrix(h8)
cacheSolve(q)
cacheSolve(q)
