## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
## Calculate the best mortality rate from the data
best.rate <- min(state.hospitals[,2])
## Create a vector of hospitals whose mortality rate matches the best rate
## The data type is still labels
best.hospitals <- state.hospitals[state.hospitals[,2] == best.rate,1]
## Sort the hospitals by name and return the first in the list
return(sort(as.character(best.hospitals))[1])
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("VI", "heat attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
setwd("~/Coursera/datasciencecoursera")
submit()
best <- function(state, outcome) {
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
## Calculate the best mortality rate from the data
best.rate <- min(state.hospitals[,2])
## Create a vector of hospitals whose mortality rate matches the best rate
## The data type is still labels
best.hospitals <- state.hospitals[state.hospitals[,2] == best.rate,1]
## Sort the hospitals by name and return the first in the list
return(sort(as.character(best.hospitals))[1])
}
setwd("~/Coursera/datasciencecoursera/rprog-data-ProgAssignment3-data")
submit()
submit()
submit()
?order
letters
?random
order(letters)
order(rev(letters))
?shuffle
dat <- data.frame(let=sample(letters, 30, replace=TRUE), val=sample(1:100, 30, replace=TRUE), stringsAsFactors = FALSE)
dat
dat[order(dat[,1]),]
dat[order(dat[,2]),]
tmp <- read.csv("outcome-of-care-measures.csv")
col <- 11
state <- "ME"
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
state.hospitals
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1])]
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
sorted.state.hospitals
state <- "NH"
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
sorted.state.hospitals
best <- function(state, outcome) {
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
## Calculate the best mortality rate from the data
best.rate <- min(state.hospitals[,2])
## Create a vector of hospitals whose mortality rate matches the best rate
## The data type is still labels
best.hospitals <- state.hospitals[state.hospitals[,2] == best.rate,1]
## Sort the hospitals by name and return the first in the list
return(sort(as.character(best.hospitals))[1])
}
sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1]
num <- 5
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals
top.state.hospitals$Rank <- Rank
top.state.hospitals
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") best(state, outcome)
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1]) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") best(state, outcome)
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1]) return("NA")
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
?print
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") best(state, outcome)
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "numonia")
submit()
submit()
submit()
submit()
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") return(best(state, outcome))
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankhospital("ME", "heart attack", "best")
tmp <- lapply(state.abb, function(state) { list(state, rankhospital(state, "heart attack", 1)) } )
data.frame(state=unlist(sapply(tmp, "[", 1)), hospital=unlist(sapply(tmp, "[", 2)))
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
rankall <- function(outcome, num = "best")  {
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
tmp <- lapply(sorted.all.states, function(state) { list(state, rankhospital(state, outcome, num)) } )
data.frame(hospital=unlist(sapply(tmp, "[", 2)), state=unlist(sapply(tmp, "[", 1)))
}
head(rankall("heart attack", 20), 10)
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") return(best(state, outcome))
#### tmp <- read.csv("outcome-of-care-measures.csv") ####
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankall <- function(outcome, num = "best")  {
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
data <- read.csv("outcome-of-care-measures.csv")
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
if (num == "best") num <- 1
tmp <- lapply(sorted.all.states, function(state) { list(state, rankhospital(state, outcome, num)) } )
data.frame(hospital=unlist(sapply(tmp, "[", 2)), state=unlist(sapply(tmp, "[", 1)))
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best")  {
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
tmp <- read.csv("outcome-of-care-measures.csv")
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
if (num == "best") num <- 1
temp <- lapply(sorted.all.states, function(state) { list(state, rankhospital(state, outcome, num)) } )
data.frame(hospital=unlist(sapply(temp, "[", 2)), state=unlist(sapply(temp, "[", 1)))
}
head(rankall("heart attack", 20), 10)
rankhospital <- function(tmp, state, outcome, num = "best") {
if (num == "best") return(best(state, outcome))
#### tmp <- read.csv("outcome-of-care-measures.csv") ####
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankall <- function(outcome, num = "best")  {
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
tmp <- read.csv("outcome-of-care-measures.csv")
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
if (num == "best") num <- 1
temp <- lapply(sorted.all.states, function(state) { list(state, rankhospital(tmp, state, outcome, num)) } )
data.frame(hospital=unlist(sapply(temp, "[", 2)), state=unlist(sapply(temp, "[", 1)))
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 5)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
rankhospital <- function(state, outcome, num = "best") {
if (num == "best") return(best(state, outcome))
tmp <- read.csv("outcome-of-care-measures.csv")
## reads the csv file in current working directory
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
rankall <- function(outcome, num = "best")  {
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
tmp <- read.csv("outcome-of-care-measures.csv")
all.states <- c(state.abb, "DC", "GU", "PR", "VI")
sorted.all.states <- sort(all.states)
if (num == "best") num <- 1
temp <- lapply(sorted.all.states, function(state) { list(state, rankhospitalbystate(tmp, state, outcome, num)) } )
data.frame(hospital=unlist(sapply(temp, "[", 2)), state=unlist(sapply(temp, "[", 1)))
}
rankhospitalbystate <- function(tmp, state, outcome, num = "best") {
if (num == "best") return(best(state, outcome))
## Now validate the state input of the function call
is.state.valid <- state %in% state.abb
## if value of state is one of the U.S. 50 states, this assigns "TRUE"
## otherwise it assigns "FALSE"
if (is.state.valid == "FALSE") {
morestates.abb <- c("GU", "PR", "VI", "DC")
is.state.valid <- state %in% morestates.abb
## if value of state is a U.S. territory included in data, this assigns "TRUE"
## otherwise it remains "FALSE"
if (is.state.valid == "FALSE") stop("invalid state")
}
## Now validate the outcome input of the function call
is.outcome.valid <- outcome %in% c("heart attack", "heart failure", "pneumonia")
if (is.outcome.valid == "FALSE") stop("invalid outcome")
## Assigns the column number corresponding to the outcome stated in the function
col <- switch(outcome, `heart attack` = 11, `heart failure` = 17, `pneumonia` = 23)
## The following creates a table in which the rows represent ONLY hospitals from the given state
## AND hospitals' mortality rate exists in the data (removes all "Not Available" data)
## The resulting table has 2 columns: Hospital Name and mortality rate for the given outcome
state.hospitals <- tmp[tmp$State == state & tmp[,col] != "Not Available", c(2, col)]
## Now convert the data in column 2 to numeric values from labels
state.hospitals[,2] <- as.numeric(as.character(state.hospitals[,2]))
state.hospitals[,1] <- as.character(state.hospitals[,1])
sorted.state.hospitals <- state.hospitals[order(state.hospitals[,2], state.hospitals[,1]),]
if (num == "worst") return(sorted.state.hospitals[length(sorted.state.hospitals$Hospital.Name),1])
if (num > length(sorted.state.hospitals[,1])) return(NA)
Rank <- 1:num
top.state.hospitals <- sorted.state.hospitals[1:num,]
top.state.hospitals$Rank <- Rank
return(sorted.state.hospitals[num,1])
}
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?rnorm
?set.seed
?pois
??pois
?rpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
